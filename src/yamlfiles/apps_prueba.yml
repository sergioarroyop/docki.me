version: "3.2"

services:

#   portainer:
#    image: portainer/portainer
#    networks:
#      - rv_proxy
#    deploy:
#      replicas: 1
#      placement:
#        constraints: [node.role==manager]
#      labels:
#        - "traefik.backend=portainer"
#        - "traefik.frontend.rule=Host:portainer.docki.me"
#        - "traefik.port=9001"
#        - "traefik.protocol=http"
#        - "traefik.docker.network=rv_proxy"
#        - "traefik.backend.loadbalancer.method=wrr"
#        - "traefik.backend.loadbalancer.swarm=true"
#    command: -H unix:///var/run/docker.sock
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - portainer_data:/data
#volumes:
#  portainer_data:
  
  who1:
    image: httpd
    networks:
      - rv_proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.backend=app1"
        - "traefik.frontend.rule=Host:app1.docki.me"
        - "traefik.port=80"        
        - "traefik.docker.network=rv_proxy"
        - "traefik.backend.loadbalancer.method=wrr"
        - "traefik.backend.loadbalancer.swarm=true"        
  who2:
    image: nginx
    networks:
      - rv_proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.backend=app2"
        - "traefik.frontend.rule=Host:app2.docki.me"
        - "traefik.port=80"
        - "traefik.docker.network=rv_proxy"
        - "traefik.backend.loadbalancer.method=wrr"
        - "traefik.backend.loadbalancer.swarm=true"        
networks:
  rv_proxy:
    external: true